version: 2.1

jobs:
  build-neovim-arm64:
    docker:
      - image: ubuntu:22.04
    environment:
      DEBIAN_FRONTEND: noninteractive

    steps:
      - checkout

      - run:
          name: üîÅ Ganti Mirror APT (anti 403)
          command: |
            sed -i 's|http://archive.ubuntu.com/ubuntu|http://mirror.kku.ac.th/ubuntu|g' /etc/apt/sources.list
            sed -i 's|http://security.ubuntu.com/ubuntu|http://mirror.kku.ac.th/ubuntu|g' /etc/apt/sources.list
            apt-get update || true

      - run:
          name: üß∞ Install Dependencies
          command: |
            apt-get update && apt-get install -y \
              git curl wget unzip tar gzip ca-certificates \
              build-essential ninja-build gettext cmake \
              libtool libtool-bin autoconf automake pkg-config \
              qemu-user-static binfmt-support docker.io jq

      - run:
          name: üê≥ Enable QEMU Emulation + Docker Buildx
          command: |
            docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
            docker buildx create --use || true

      - run:
          name: üõ†Ô∏è Build Neovim ARM64 v0.10.0
          command: |
            mkdir -p /tmp/output
            docker run --rm --platform linux/arm64 \
              -v $(pwd)/output:/build \
              ubuntu:22.04 bash -c '
                set -e
                apt update &&
                apt install -y git ninja-build gettext cmake unzip curl build-essential \
                  libtool libtool-bin autoconf automake pkg-config tar coreutils &&
                curl -fsSL https://github.com/neovim/neovim/archive/refs/tags/v0.10.0.tar.gz -o neovim.tar.gz &&
                tar -xzf neovim.tar.gz &&
                cd neovim-0.10.0 &&
                make CMAKE_BUILD_TYPE=Release CMAKE_INSTALL_PREFIX=/build/nvim-arm64 -j2 &&
                make install &&
                mkdir -p /build/nvim-arm64/share/nvim &&
                cp -r runtime /build/nvim-arm64/share/nvim &&
                cd /build &&
                tar -czf nvim-arm64.tar.gz nvim-arm64 &&
                sha256sum nvim-arm64.tar.gz > sha256.txt
              '

      - run:
          name: ‚úÖ Test Neovim Binary (ARM64)
          command: |
            docker run --rm --platform linux/arm64 \
              -v $(pwd)/output/nvim-arm64:/nvim ubuntu:22.04 \
              bash -c '/nvim/bin/nvim --version || echo "‚ùå Neovim gagal jalan!"'

      - run:
          name: üìã Cek Output
          command: |
            ls -lh output/
            cat output/sha256.txt

      - store_artifacts:
          path: output/nvim-arm64.tar.gz
          destination: nvim-arm64

      - store_artifacts:
          path: output/sha256.txt
          destination: sha256

      - run:
          name: üöÄ Upload ke GitHub Release
          command: |
            apt-get install -y git curl jq
            export TAG="v0.10.0-arm64"
            export FILE="nvim-arm64.tar.gz"
            export FILE_SHA="sha256.txt"
            export GH_REPO="iyanldn/Ubuntu-V24.04"
            export RELEASE_NAME="Neovim ARM64 v0.10.0"
            export BODY="‚úÖ Built via CircleCI on $(date +%Y-%m-%d)\nüîí SHA256:\n$(cat output/sha256.txt)"

            cd output

            git config --global user.email "ci@circleci"
            git config --global user.name "circleci-bot"
            git tag "$TAG" || true
            git push "https://${GH_TOKEN}@github.com/${GH_REPO}.git" "$TAG" || true

            curl -s -X POST \
              -H "Authorization: token ${GH_TOKEN}" \
              -H "Content-Type: application/json" \
              -d "{\"tag_name\":\"$TAG\", \"name\":\"$RELEASE_NAME\", \"body\":\"$BODY\", \"draft\":false, \"prerelease\":false}" \
              https://api.github.com/repos/${GH_REPO}/releases || true

            RELEASE_ID=$(curl -s -H "Authorization: token ${GH_TOKEN}" \
              https://api.github.com/repos/${GH_REPO}/releases/tags/$TAG | jq -r .id)

            curl -s -X POST \
              -H "Authorization: token ${GH_TOKEN}" \
              -H "Content-Type: application/gzip" \
              --data-binary @"$FILE" \
              "https://uploads.github.com/repos/${GH_REPO}/releases/$RELEASE_ID/assets?name=$FILE"

            curl -s -X POST \
              -H "Authorization: token ${GH_TOKEN}" \
              -H "Content-Type: text/plain" \
              --data-binary @"$FILE_SHA" \
              "https://uploads.github.com/repos/${GH_REPO}/releases/$RELEASE_ID/assets?name=$FILE_SHA"

workflows:
  version: 2
  build_and_release:
    jobs:
      - build-neovim-arm64
